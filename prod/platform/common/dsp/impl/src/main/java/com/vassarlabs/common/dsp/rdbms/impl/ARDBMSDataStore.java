package com.vassarlabs.common.dsp.rdbms.impl;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

import com.vassarlabs.common.dsp.api.IDataStore;
import com.vassarlabs.common.dsp.context.DataStoreContext;
import com.vassarlabs.common.dsp.err.DSPException;
import com.vassarlabs.common.dsp.rdbms.api.IJDBCConnection;
import com.vassarlabs.common.dsp.rdbms.api.IRDBMSDataStore;

public abstract class ARDBMSDataStore
	extends ADataStore 
	implements IRDBMSDataStore {
	
	protected ARDBMSDataStore() {
	}

	@Override
	public int getDataStoreType() {
		return IDataStore.RDBMS_TYPE;
	}
	
	@Override
	public String beginTransaction()
		throws DSPException {
		if (DataStoreContext.isTransactionInProgress()) {
			return DataStoreContext.TRANSACTION_IN_PROGRESS;
		}

		// TODO: dataStoreName should be injected into IJDBCConnection, and not passed
		IJDBCConnection jdbcConnection = getJDBCConnection();
		String transactionId = jdbcConnection.beginTransaction();
		return transactionId;
	}

	@Override
	public boolean commitTransaction(String transactionId)
		throws DSPException {
		
		boolean result = getJDBCConnection().commitTransaction(transactionId);
		if (result) {
			DataStoreContext.clearTransactionInProgress();
		}
		return result;
	}
	
	@Override
	public boolean rollbackTransaction(String transactionId)
		throws DSPException {

		boolean result = getJDBCConnection().rollbackTransaction(transactionId);
		if (result) {
			DataStoreContext.clearTransactionInProgress();
		}
		return result;
	}

	protected abstract IJDBCConnection getJDBCConnection()
		throws DSPException;

	public PreparedStatement createPreparedStatement(String sql)
		throws SQLException, DSPException {

		return getJDBCConnection().createPreparedStatement(sql);
	}
	
	public PreparedStatement createPreparedStatement(String sql, int autoGeneratedKeys)
		throws SQLException, DSPException {

		return getJDBCConnection().createPreparedStatement(sql, autoGeneratedKeys);
	}

	public PreparedStatement createPreparedStatement(String sql, int resultSetType, int resultSetConcurrency)
		throws SQLException, DSPException {

		return getJDBCConnection().createPreparedStatement(sql, resultSetType, resultSetConcurrency);
	}
	
	public Statement createStatement(int resultSetType, int resultSetConcurrency)
		throws SQLException, DSPException {

		return getJDBCConnection().createStatement(resultSetType, resultSetConcurrency);
	}
	
	public CallableStatement createCallableStatement(String sql) throws SQLException, DSPException {
		return getJDBCConnection().createCallableStatement(sql);
	}
	
}
