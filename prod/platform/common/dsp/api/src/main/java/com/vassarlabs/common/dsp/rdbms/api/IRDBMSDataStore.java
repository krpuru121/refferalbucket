package com.vassarlabs.common.dsp.rdbms.api;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

import com.vassarlabs.common.dsp.api.IDataStore;
import com.vassarlabs.common.dsp.err.DSPException;

/**
 * This interface represents a RDBMS type Data Store and is a wrapper
 * over the JDBC Connection
 * 
 * @author gpradeep
 *
 */
public interface IRDBMSDataStore
	extends IDataStore {
	
	/**
	 * Begins a transaction on this connection
	 * Returns an Unique ID as the Transaction ID - this key is used to 
	 * manage the transactions
	 * If a transaction is in progress returns NULL value
	 * 
	 * @return
	 * @throws DSPException
	 */
	public String beginTransaction()
		throws DSPException;
	
	/**
	 * Commits a transaction on this connection
	 * A transaction can be committed by only the caller/owner who 
	 * begin the transaction.  The transaction id identifies the owner
	 * 
	 * A commit by the non-owner or with invalid transaction id, logs
	 * a warning message
	 * 
	 * @param transactionId
	 * @return
	 * @throws DSPException
	 */
	public boolean commitTransaction(String transactionId)
		throws DSPException;
	
	/**
	 * Roll back a transaction on this connection
	 * A transaction can be rolled back by only the caller/owner who 
	 * begin the transaction.  The transaction id identifies the owner
	 * 
	 * A roll back by the non-owner or with invalid transaction id, logs
	 * a warning message
	 * 
	 * @param transactionId
	 * @return
	 * @throws DSPException
	 */
	public boolean rollbackTransaction(String transactionId)
		throws DSPException;
	
	/**
	 * Creates a new PreparedStatement instance for this connection
	 *  
	 * @param sql
	 * @return
	 * @throws SQLException 
	 * @throws DSPException 
	 */
	public PreparedStatement createPreparedStatement(String sql)
		throws SQLException, DSPException;
	
	/**
	 * Creates a new PreparedStatement instance for this connection
	 * 
	 * @param sql
	 * @param autoGeneratedKeys
	 * @return
	 * @throws SQLException
	 * @throws DSPException 
	 */
	public PreparedStatement createPreparedStatement(String sql, int autoGeneratedKeys)
		throws SQLException, DSPException;
	
	/**
	 * Creates a new PreparedStatement instance for this connection
	 * 
	 * @param sql
	 * @param resultSetType
	 * @param resultSetConcurrency
	 * @return
	 * @throws SQLException 
	 * @throws DSPException 
	 */
	public PreparedStatement createPreparedStatement(String sql, int resultSetType, int resultSetConcurrency)
		throws SQLException, DSPException;
	
	/**
	 * Creates a new Statement instance for this connection
	 * 
	 * @param resultSetType
	 * @param resultSetConcurrency
	 * @return
	 * @throws SQLException
	 * @throws DSPException 
	 */
	public Statement createStatement(int resultSetType, int resultSetConcurrency)
		throws SQLException, DSPException;
	
	public CallableStatement createCallableStatement(String sql) throws SQLException, DSPException;
}
